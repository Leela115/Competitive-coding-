#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;           
    struct Node* next;  
};


struct Stack {
    struct Node* top;  
};


void initStack(struct Stack* stack) {
    stack->top = NULL;  
}


int isEmpty(struct Stack* stack) {
    return stack->top == NULL;
}


void push(struct Stack* stack, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }
    newNode->data = value;
    newNode->next = stack->top;  
    stack->top = newNode;        
    printf("Pushed %d onto the stack\n", value);
}


int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! Cannot pop\n");
        return -1;  
    }
    struct Node* temp = stack->top;  
    int poppedValue = temp->data;    
    stack->top = stack->top->next;   
    free(temp);  
    return poppedValue;
}


int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return -1;  // Return a sentinel value
    }
    return stack->top->data;  
}


void display(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return;
    }
    struct Node* temp = stack->top;  
    printf("Stack elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;  
    }
    printf("\n");
}

int main() {
    struct Stack stack;  
    initStack(&stack);   
    int choice, value;

    
    do {
        printf("\nStack Operations Menu:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice (1-5): ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
               
                printf("Enter the value to push: ");
                scanf("%d", &value);
                push(&stack, value);
                break;

            case 2:
                
                value = pop(&stack);
                if (value != -1) {
                    printf("Popped value: %d\n", value);
                }
                break;

            case 3:
                
                value = peek(&stack);
                if (value != -1) {
                    printf("Top element is: %d\n", value);
                }
                break;

            case 4:
                
                display(&stack);
                break;

            case 5:
               
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option (1-5).\n");
        }
    } while (choice != 5);

    return 0;
}
